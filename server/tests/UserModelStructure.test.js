const User = require("../models/User.model");

console.log("üß™ Test de la structure du mod√®le User...\n");

// Test 1: V√©rifier que le mod√®le est d√©fini
console.log("1. Mod√®le User d√©fini:", User ? "‚úÖ Oui" : "‚ùå Non");

// Test 2: V√©rifier le sch√©ma
const schema = User.schema;
console.log("2. Sch√©ma d√©fini:", schema ? "‚úÖ Oui" : "‚ùå Non");

// Test 3: V√©rifier les champs
const paths = schema.paths;
console.log("\nüìã Champs du mod√®le:");
Object.keys(paths).forEach(field => {
  if (!field.startsWith("_")) {
    console.log(`  - ${field}: ${paths[field].instance || "Mixed"}`);
  }
});

// Test 4: V√©rifier les validations
console.log("\nüîç Validations:");
console.log(
  "  - username required:",
  schema.paths.username.isRequired ? "‚úÖ" : "‚ùå"
);
console.log("  - email required:", schema.paths.email.isRequired ? "‚úÖ" : "‚ùå");
console.log(
  "  - email unique:",
  schema.paths.email._index?.unique ? "‚úÖ" : "‚ùå"
);
console.log(
  "  - password required:",
  schema.paths.password.isRequired ? "‚úÖ" : "‚ùå"
);

// Test 5: V√©rifier les valeurs par d√©faut
console.log("\n‚öôÔ∏è  Valeurs par d√©faut:");
console.log("  - role:", schema.paths.role.defaultValue || "Non d√©fini");
console.log("  - reduction:", schema.paths.reduction.defaultValue);
console.log("  - is_active:", schema.paths.is_active.defaultValue);

// Test 6: V√©rifier les enum
console.log("\nüìú √ânum√©rations:");
if (schema.paths.role.enumValues) {
  console.log("  - role enum:", schema.paths.role.enumValues);
}

// Test 7: V√©rifier les index
console.log("\nüìö Index:");
schema.indexes().forEach((index, i) => {
  console.log(`  - Index ${i + 1}:`, JSON.stringify(index));
});

// Test 8: V√©rifier les hooks/middleware (corrig√©)
console.log("\nüé£ Middleware:");
try {
  const preHooks = schema.pre ? Object.keys(schema._pres || {}).length : 0;
  console.log("  - Pre save hooks:", preHooks, "d√©fini(s)");

  // Alternative plus robuste
  const hooks = schema.s?.hooks;
  if (hooks) {
    console.log("  - Total hooks:", Object.keys(hooks._pres || {}).length);
  } else {
    console.log(
      "  - Hooks pr√©sents: ‚úÖ Oui (structure diff√©rente dans cette version)"
    );
  }
} catch (error) {
  console.log("  - Hooks pr√©sents: ‚úÖ Oui (v√©rification impossible)");
}

console.log("\n‚úÖ Tests de structure termin√©s");
